@page "/lesson/{lesson_name}"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Shared.Models
@using System.Collections;
@using Shared.Models.MongoDB;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime jsRuntime


<h3>Lesson: @lesson_name</h3>
<img hidden=@(currPage.img==null) src=@("images/"+currPage.img)/>


@if (puzzle != null)
{
<div style="display: flex; justify-content: center; align-items: center; height: auto;">
    <div>
        <div @ref="divCanvas" @onclick="@(async (MouseEventArgs m) => await OnClick(m))" class="board-canvas-9">
        <BECanvas @ref="stones" Height="320" Width="320"></BECanvas>
         </div>
        
    </div>
</div>
}

<div>@(currPage.text)</div>


<div style="display: flex; justify-content: center; align-items: center; height: auto;">
    <button type="button" @onclick="async () => await Back()" disabled=@(currIndex==0)>&lt;</button>&nbsp;
    <button type="button" @onclick="async () => await Forward()" disabled=@(currIndex==lesson.lessonPages.Count-1)>&gt;</button>
</div>

@code {
    [Parameter]
    public String lesson_name { get; set; }
    private Shared.Models.Lesson lesson;
    private Shared.Models.LessonPage currPage;
    private Shared.Models.Puzzle puzzle;
    private Shared.Models.Game game;
    private int currIndex;


    ElementReference divCanvas;
    Blazor.Extensions.BECanvasComponent stones;
    Canvas2DContext currentCanvasContext;

    protected override async Task OnInitializedAsync()
    {
        lesson = LessonDBInterface.GetLesson(lesson_name);
        currPage = lesson.lessonPages.ElementAt<LessonPage>(0);
        puzzle = currPage.puzzle;
        if (puzzle != null)
        {
            game = puzzle.game;
        }
        currIndex = 0;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender & stones != null)
        {
            currentCanvasContext = await stones.CreateCanvas2DAsync();
            game.ResetToStart();
            game.SetMove(game.totalMoves-2);
            await Refresh();
            Console.WriteLine(game.thisMove);
        }
    }


    private async Task Refresh()
    {
        int dimensions = 9;
        for (int i = 0; i < dimensions; i++)
        {
            for (int j = 0; j < dimensions; j++)
            {
                int color = game.board.getBoard()[i, j];
                if (color != 0)
                {
                    if (color == 1)
                    {
                        await currentCanvasContext.SetFillStyleAsync("Black");
                    }
                    else if (color == -1)
                    {
                        await currentCanvasContext.SetFillStyleAsync("White");
                    }
                    await currentCanvasContext.BeginPathAsync();
                    await currentCanvasContext.ArcAsync(i * 30 + 40, j * 30 + 40, 10, 0, 2 * Math.PI);
                    await currentCanvasContext.ClosePathAsync();
                    await currentCanvasContext.FillAsync();
                }
                else
                {
                    int x = (i * 30) + 30;
                    int y = (j * 30) + 30;
                    await currentCanvasContext.ClearRectAsync(x, y, 20, 20);
                }
            }
        }
    }

    int[] GetMove(double mouseX, double mouseY)
    {
        int dim = 9;
        for (int i = 0; i < dim; i++)
        {
            for (int j = 0; j < dim; j++)
            {
                int x = (i * 30) + 40;
                int y = (j * 30) + 40;
                if (mouseX < x + 10 && mouseX > x - 10 && mouseY < y + 10 && mouseY > y - 10)
                {
                    return new int[] { i, j };
                }
            }
        }
        return null;
    }

    bool isLoadingOnClick = false;
    IUser user;
    bool gameOver = false;
    string turn = "Black's Turn";
    string illegal = "";
    string lastText = "";
    int whiteScore = 0;
    int blackScore = 0;
    int whiteCapt = 0;
    int blackCapt = 0;

    async Task OnClick(MouseEventArgs eventArgs)
    {
        if (isLoadingOnClick)
        {
            return;
        }
        if (game.state != status.BlacksTurn && game.state != status.WhitesTurn)
        {
            return;
        }
        isLoadingOnClick = true;
        double mouseX = 0;
        double mouseY = 0;
        if (divCanvas.Id?.Length > 0)
        {
            string data = await jsRuntime.InvokeAsync<string>("getDivCanvasOffsets", new object[] { divCanvas });
            JObject offsets = (JObject)JsonConvert.DeserializeObject(data);
            mouseX = eventArgs.ClientX - offsets.Value<double>("offsetLeft");
            mouseY = eventArgs.ClientY - offsets.Value<double>("offsetTop");
            int[] move = GetMove(mouseX, mouseY);

            if (stones != null && currentCanvasContext != null && move != null)
            {
                ArrayList capturedPeices = new ArrayList();
                try
                {
                    capturedPeices = game.playMove(move[0], move[1]); illegal = "";
                    blackScore = game.getScore()[0];
                    whiteScore = game.getScore()[1];
                    blackCapt = game.board.captured[0];
                    whiteCapt = game.board.captured[1];
                    if (game.state == status.WhitesTurn)
                    {
                        turn = "White's Turn";
                        lastText = "Black played to " + (Convert.ToChar(65 + move[0])) + (9 - move[1]);
                    }
                    else if (game.state == status.BlacksTurn)
                    {
                        turn = "Black's Turn";
                        lastText = "White played to " + (Convert.ToChar(65 + move[0])) + (9 - move[1]);
                    }
                    else
                    {
                        turn = "";
                        gameOver = true;
                    }
                    GameDBInterface.UpdateGame(game);
                    await DrawStone(move);
                    await RemoveStones(capturedPeices);
                }
                catch (IllegalMoveException e) { illegal = "Illegal move - try again."; }
            }
        }
        isLoadingOnClick = false;
    }

    async Task DrawStone(int[] move)
    {
        if (game.state == status.WhitesTurn)
        {
            await currentCanvasContext.SetFillStyleAsync("Black");

        }
        else
        {
            await currentCanvasContext.SetFillStyleAsync("White");
        }
        await currentCanvasContext.BeginPathAsync();
        await currentCanvasContext.ArcAsync(move[0] * 30 + 40, move[1] * 30 + 40, 10, 0, 2 * Math.PI);
        await currentCanvasContext.ClosePathAsync();
        await currentCanvasContext.FillAsync();

    }

    async Task RemoveStones(ArrayList capturedPeices)
    {
        if (capturedPeices != null || capturedPeices.Count != 0)
        {
            foreach (int[] coord in capturedPeices)
            {
                int x = (coord[0] * 30) + 30;
                int y = (coord[1] * 30) + 30;
                await currentCanvasContext.ClearRectAsync(x, y, 20, 20);
            }
        }
    }

    private async Task Forward()
    {
        if (currIndex < lesson.lessonPages.Count-1)
        {
            currIndex++;
            currPage = lesson.lessonPages.ElementAt(currIndex);
        }
    }

    private async Task Back()
    {
        if (currIndex > 0)
        {
            currIndex--;
            currPage = lesson.lessonPages.ElementAt(currIndex);
        }
    }
}