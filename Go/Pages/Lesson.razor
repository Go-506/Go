@page "/lesson/{lesson_name}"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Shared.Models
@using System.Collections;
@using Shared.Models.MongoDB;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime jsRuntime


<h3>Lesson: @lesson_name</h3>
<img hidden=@(currPage.img==null) src=@("images/"+currPage.img)/>


@if (game != null)
{
<div style="display: flex; justify-content: center; align-items: center; height: auto;">
    <div>
        <div @ref="divCanvas" class="board-canvas-9">
        <BECanvas @ref="stones" Height="320" Width="320"></BECanvas>
         </div>
        
    </div>
</div>
}

<div>@(currPage.text)</div>


<div style="display: flex; justify-content: center; align-items: center; height: auto;">
    <button type="button" @onclick="async () => await Back()" disabled=@(currIndex==0)>&lt;</button>&nbsp;
    <button type="button" @onclick="async () => await Forward()" disabled=@(currIndex==lesson.lessonPages.Count-1)>&gt;</button>
</div>

@code {
    [Parameter]
    public String lesson_name { get; set; }
    private Shared.Models.Lesson lesson;
    private Shared.Models.LessonPage currPage;
    private Shared.Models.Puzzle puzzle;
    private Shared.Models.Game game;
    private int currIndex;
    private int dimensions = 9;


    ElementReference divCanvas;
    Blazor.Extensions.BECanvasComponent stones;
    Canvas2DContext currentCanvasContext;

    protected override async Task OnInitializedAsync()
    {
        lesson = LessonDBInterface.GetLesson(lesson_name);
        currPage = lesson.lessonPages.ElementAt<LessonPage>(0);
        game = currPage.game;
        if (game != null)
        {
            //game.ResetToStart();
            //game.SetMove(0);
            //Console.WriteLine(game.thisMove);
            //game.SetMove(game.totalMoves);
            Console.WriteLine(game.thisMove);

            puzzle = new Puzzle(game);
        }
        currIndex = 0;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender & stones != null)
        {
            currentCanvasContext = await stones.CreateCanvas2DAsync();
            game.ResetToStart();
            game.SetMove(game.totalMoves-2);
            await Refresh();
            Console.WriteLine(game.thisMove);
        }
    }


    private async Task Refresh()
    {
        int dimensions = 9;
        for (int i = 0; i < dimensions; i++)
        {
            for (int j = 0; j < dimensions; j++)
            {
                Console.Write(game.board.getBoard()[i, j]);
                int color = game.board.getBoard()[i, j];
                if (color != 0)
                {
                    if (color == 1)
                    {
                        await currentCanvasContext.SetFillStyleAsync("Black");
                    }
                    else if (color == -1)
                    {
                        await currentCanvasContext.SetFillStyleAsync("White");
                    }
                    await currentCanvasContext.BeginPathAsync();
                    await currentCanvasContext.ArcAsync(i * 30 + 40, j * 30 + 40, 10, 0, 2 * Math.PI);
                    await currentCanvasContext.ClosePathAsync();
                    await currentCanvasContext.FillAsync();
                }
                else
                {
                    int x = (i * 30) + 30;
                    int y = (j * 30) + 30;
                    await currentCanvasContext.ClearRectAsync(x, y, 20, 20);
                }
            }
            Console.WriteLine();
        }
    }


    private async Task Forward()
    {
        if (currIndex < lesson.lessonPages.Count-1)
        {
            currIndex++;
            currPage = lesson.lessonPages.ElementAt(currIndex);
        }
    }

    private async Task Back()
    {
        if (currIndex > 0)
        {
            currIndex--;
            currPage = lesson.lessonPages.ElementAt(currIndex);
        }
    }
}