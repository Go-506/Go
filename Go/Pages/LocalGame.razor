@page "/localgame"
@page "/localgame/{dimensions}"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Shared.Models
@using System.Collections;
@using Shared.Models.MongoDB;
@inject NavigationManager NavMan
@inject IJSRuntime jsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<h2 style="padding-right: 150px; text-align: center;"><b>@turn</b></h2>
<div style="display: flex; padding-right: 150px; justify-content: center; align-items: center; height: auto;">
    <button class="btn-primary" @onclick="Pass" style="font-size: 16px; align-self: center;">Pass</button>
</div>
<br />
<div class="turn-options inline">
    <div>
        <div class="inline" style="font-size: 24px;"><b>Black's Score: </b></div>
        <p class="inline" style="font-size: 24px;">@blackScore</p>
    </div>
    <div>
        <p class="inline" style="font-size: 24px;"><b>White's Score: </b></p>
        <p class="inline" style="font-size: 24px;">@whiteScore</p>
    </div>
    <div style="color: red">@illegal</div>
</div>
<div style="display: flex; justify-content: center; align-items: center; height: auto;">
    @if (dimensions.Equals("19"))
    {
        <div @ref="divCanvas" @onclick="@(async (MouseEventArgs m) => await OnClick(m))" class="board-canvas-19">
            <BECanvas @ref="stones" Height="620" Width="620"></BECanvas>
        </div>
    }
    @if (dimensions.Equals("13"))
    {
        <div @ref="divCanvas" @onclick="@(async (MouseEventArgs m) => await OnClick(m))" class="board-canvas-13">
            <BECanvas @ref="stones" Height="440" Width="440"></BECanvas>
        </div>
    }
    @if (dimensions.Equals("9"))
    {
        <div @ref="divCanvas" @onclick="@(async (MouseEventArgs m) => await OnClick(m))" class="board-canvas-9">
            <BECanvas @ref="stones" Height="320" Width="320"></BECanvas>
        </div>
    }

    @if (gameOver)
    {
        <div class="modal fade show d-block" id="login" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="titleLabel">Game Finished</h5>
                        <button type="button" class="close" @onclick="Close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @if (game.state == status.BlackWon)
                        {
                            <div> Black Wins</div>
                        }
                        @if (game.state == status.WhiteWon)
                        {
                            <div> White Wins</div>;
                        }
                        @if (game.state == status.Draw)
                        {
                            <div> Draw!</div>
                        }
                        <br />
                        <button type="submit" class="btn btn-primary" @onclick="Reset">Reset Game</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<br>

@code {
    [Parameter]
    public String dimensions { get; set; }
    public static NavigationManager NavMan2;
    int dim;
    ElementReference divCanvas;
    Blazor.Extensions.BECanvasComponent stones;
    Canvas2DContext currentCanvasContext;
    bool isLoadingOnClick = false;
    IUser user;
    bool gameOver = false;
    string turn = "Black's Turn";
    string illegal = "";
    int whiteScore = 0;
    int blackScore = 0;
    Game game;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dim = Int32.Parse(dimensions);
            NavMan2 = NavMan;
            currentCanvasContext = await stones.CreateCanvas2DAsync();

            IUser user = await Globals.GetUser(localStorage);
            string username = user is null ? "GUEST" : user.name;
            game = new Game(dim, username, null);
            user = await Globals.GetUser(localStorage);
            GameDBInterface.InsertGame(game);
            if (user is Player)
            {
                ((Player)user).addGame(game);
                UserDBInterface.UpdateUser(user);
            }
            StateHasChanged();
        }


    }

    private void Close()
    {
        gameOver = false;
    }

    private void Reset()
    {
        NavMan2.NavigateTo(NavMan2.Uri, forceLoad: true);
        Close();
    }

    async void Pass()
    {
        game.passTurn();
        if (game.state == status.WhitesTurn)
            turn = "White's Turn";
        else if (game.state == status.BlacksTurn)
            turn = "Black's Turn";
        else
        {
            turn = "";
            gameOver = true;
        }
        GameDBInterface.UpdateGame(game);
    }

    int[] GetMove(double mouseX, double mouseY)
    {
        for (int i = 0; i < dim; i++)
        {
            for (int j = 0; j < dim; j++)
            {
                int x = (i * 30) + 40;
                int y = (j * 30) + 40;
                if (mouseX < x + 10 && mouseX > x - 10 && mouseY < y + 10 && mouseY > y - 10)
                {
                    return new int[] {i, j};
                }
            }
        }
        return null;
    }

    async Task DrawStone(int[] move)
    {
        if (game.state == status.WhitesTurn)
        {
            await currentCanvasContext.SetFillStyleAsync("Black");

        }
        else
        {
            await currentCanvasContext.SetFillStyleAsync("White");
        }
        await currentCanvasContext.BeginPathAsync();
        await currentCanvasContext.ArcAsync(move[0] * 30 + 40, move[1] * 30 + 40, 10, 0, 2 * Math.PI);
        await currentCanvasContext.ClosePathAsync();
        await currentCanvasContext.FillAsync();

    }

    async Task RemoveStones(ArrayList capturedPeices)
    {
        if (capturedPeices != null || capturedPeices.Count != 0)
        {
            foreach (int[] coord in capturedPeices)
            {
                int x = (coord[0] * 30) + 30;
                int y = (coord[1] * 30) + 30;
                await currentCanvasContext.ClearRectAsync(x, y, 20, 20);
            }
        }
    }

    async Task OnClick(MouseEventArgs eventArgs)
    {
        if (isLoadingOnClick)
        {
            return;
        }
        if (game.state != status.BlacksTurn && game.state != status.WhitesTurn)
        {
            return;
        }
        isLoadingOnClick = true;
        double mouseX = 0;
        double mouseY = 0;
        if (divCanvas.Id?.Length > 0)
        {
            string data = await jsRuntime.InvokeAsync<string>("getDivCanvasOffsets", new object[] { divCanvas });
            JObject offsets = (JObject)JsonConvert.DeserializeObject(data);
            mouseX = eventArgs.ClientX - offsets.Value<double>("offsetLeft");
            mouseY = eventArgs.ClientY - offsets.Value<double>("offsetTop");
            int[] move = GetMove(mouseX, mouseY);

            if (stones != null && currentCanvasContext != null && move != null)
            {
                ArrayList capturedPeices = new ArrayList();
                try {capturedPeices = game.playMove(move[0], move[1]); illegal = ""; }
                catch (IllegalMoveException e) { illegal = "Illegal move - try again."; }
                blackScore = game.getScore()[0];
                whiteScore = game.getScore()[1];
                if (game.state == status.WhitesTurn)
                    turn = "White's Turn";
                else if (game.state == status.BlacksTurn)
                    turn = "Black's Turn";
                else
                {
                    turn = "";
                    gameOver = true;
                }
                GameDBInterface.UpdateGame(game);
                await DrawStone(move);
                await RemoveStones(capturedPeices);
            }
        }
        isLoadingOnClick = false;
    }
}
